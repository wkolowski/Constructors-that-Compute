data Set (A : Type) : Type :=
  | in (x : A)
  | id
  | op (s1 s2 : Set A) :=
    | e y => y
    | x e => x
    | (op x y) z => op x (op y z)
  | comm (x y : Set A) (i : I) :=
    | i0 => op x y
    | i1 => op y x
  | idem (x : Set A) (i : I) :=
    | i0 => op x x
    | i1 => x

map (f : a -> b) : Set a -> Set b
| in x       => in (f x)
| id         => id
| op x y     => op   (map x) (map y)
| comm x y i => comm (map x) (map y) i
| idem x   i => idem (map x)         i

rev : Set a -> Set a
| in x       => in x
| id         => id
| op x y     => op   (rev y) (rev x)
| comm x y i => comm (rev y) (rev x) i
| idem x   i => idem (rev x)         i

rev-rev : (s : Set a) -> rev s = s
| in x       => refl
| id         => refl
| op x y     => fun i => comm (rev-rev y i) (rev-rev x i) i
| comm x y i => // this is hell
| idem x   i => // this too

filter (p : a -> Bool) : Set a -> Set a
| in x       => if p x then in a else id
| id         => id
| op x y     => op   (filter x) (filter y)
| comm x y i => comm (filter x) (filter y) i
| idem x   i => idem (filter x)            i

join : Set (Set a) -> Set a
| in x       => x
| id         => id
| op x y     => op   (join x) (join y)
| comm x y i => comm (join x) (join y) i
| idem x   i => idem (join x)          i
