// Old, boring syntax.
codata BST (R : A -> A -> Prop) : Type
| E
| N of (root : A, l r : BST, okl : OKL root l, okr : OKR root r)

and

codata OKL (R : A -> A -> Prop) : A -> BST -> Prop
| OKL-E : #(root : A) -> OKL root E
| OKL-N : #(root x : A, l r : BST) (okl : OKL x l, okr : OKR x r, p : R x root) ->
            OKL root (N x l r okl okr)

and

codata OKR (R : A -> A -> Prop) : A -> BST -> Prop
| OKR-E : #(root : A) -> OK root E
| OKR-N : #(root x : A, l r : BST) (okl : OKL x l, okr : OKR x r, p : R x root -> Empty) ->
            OKR root (N x l r okl okr)

// Intermediate syntax with `is` and uniform indices.
codata BST (R : A -> A -> Prop) : Type
| E
| N of (root : A, l r : BST, okl : OKL root l, okr : OKR root r)

and

codata OKL (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKL-E of (_ : h is E)
| OKL-N of (_ : h is N, p : R h.root root)

and

codata OKR (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKR-E of (_ : h is E)
| OKR-N of (_ : h is N, p : R h.root root -> Empty)

// Best syntax.
codata BST (R : A -> A -> Prop) : Type
| E
| N of
  & root of A
  & l r  of BST
  & okl  of OKL root l
  & okr  of OKR root r

and

codata OKL (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKL-E of
  & _ of h is E
| OKL-N of
  & _ of h is N
  & p of R h.root root

and

codata OKR (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKR-E of
  & _ of h is E
| OKR-N of
  & _ of h is N
  & p of R h.root root -> Empty

// Even better - we can replace fields named `_`, like `_ of h is N`,
// with unnamed fields.
codata BST (R : A -> A -> Prop) : Type
| E
| N of
  & root of A
  & l r  of BST
  & okl  of OKL root l
  & okr  of OKR root r

and

codata OKL (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKL-E of
  & h is E
| OKL-N of
  & h is N
  & p of R h.root root

and

codata OKR (R : A -> A -> Prop) : (root : A, h : BST) -> Prop
| OKR-E of
  & h is E
| OKR-N of
  & h is N
  & p of R h.root root -> Empty

// Using a `mutual` block.
mutual
  #(A : Type) (R : A -> A -> Prop)

  codata BST : Type
  | E
  | N of
    & root of A
    & l r  of BST
    & okl  of OKL root l
    & okr  of OKR root r

  codata OKL : (root : A, h : BST) -> Prop
  | OKL-E of
    & h is E
  | OKL-N of
    & h is N
    & p of R h.root root

  codata OKR : (root : A, h : BST) -> Prop
  | OKR-E of
    & h is E
  | OKR-N of
    & h is N
    & p of R h.root root -> Empty

// Definitions of functions - this is where coinduction-coinduction happens.

map
  #(A B : Type)
  (R : A -> A -> Prop) (S : B -> B -> Prop)
  (f : A -> B)
  (pres : #(x y : A) -> R x y -> S (f x) (f y))
  (reflect : #(x y : A) -> S (f x) (f y) -> R x y)
  : (h : BST R) -> BST S
| E => E
| N => N
  & root => f h.root
  & l    => map h.l
  & r    => map h.r
  & okl  => map-okl h.okl
  & okr  => map-okr h.okr

and

map-okl
  #(A B : Type)
  (R : A -> A -> Prop) (S : B -> B -> Prop)
  (f : A -> B)
  (pres : #(x y : A) -> R x y -> S (f x) (f y))
  (reflect : #(x y : A) -> S (f x) (f y) -> R x y)
  : (#v : A, #h : BST R, okl : OKL v h) -> OKL (f v) (map h)
| OK-E => OK-E
| OK-N => OK-N
  & okl => map-okl h.okl
  & okr => map-okr h.okr
  & p   => pres okl.p

and

map-okr
  #(A B : Type)
  (R : A -> A -> Prop) (S : B -> B -> Prop)
  (f : A -> B)
  (pres : #(x y : A) -> R x y -> S (f x) (f y))
  (reflect : #(x y : A) -> S (f x) (f y) -> R x y)
  : (#v : A, #h : BST R, okr : OKR v h) -> OKR (f v) (map h)
| OK-E => OK-E
| OK-N => OK-N
  & okl => map-okl h.okl
  & okr => map-okr h.okr
  & p   => fun x : S (f h.root) (f v) => reflect x |> okr.p

// By using a `mutual` block, we saved 11 lines.
// In general, the more functions we want to define, the bigger the savings.
mutual
  #(A B : Type)
  (R : A -> A -> Prop) (S : B -> B -> Prop)
  (f : A -> B)
  (pres : #(x y : A) -> R x y -> S (f x) (f y))
  (reflect : #(x y : A) -> S (f x) (f y) -> R x y)
  
  map : (h : BST R) -> BST S
  | E => E
  | N => N
    & root => f h.root
    & l    => map h.l
    & r    => map h.r
    & okl  => map-okl h.okl
    & okr  => map-okr h.okr

  and

  map-okl : (#v : A, #h : BST R, okl : OKL v h) -> OKL (f v) (map h)
  | OK-E => OK-E
  | OK-N => OK-N
    & okl => map-okl h.okl
    & okr => map-okr h.okr
    & p   => pres okl.p

  and

  map-okr : (#v : A, #h : BST R, okr : OKR v h) -> OKR (f v) (map h)
  | OK-E => OK-E
  | OK-N => OK-N
    & okl => map-okl h.okl
    & okr => map-okr h.okr
    & p   => fun x : S (f h.root) (f v) => reflect x |> okr.p