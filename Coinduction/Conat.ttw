// Note: this is not a "positive" coinductive type, but rather just a notation
// for a proper, negative coinductive type.
codata Conat : Type
| z
| s (pred : Conat)

%OverlappingPatterns
add : (n m : Conat) -> Conat
| z   , _    => m
| _   , z    => n
| s n', _    => s (add n' m)
| _   , s m' => s (add n m')

// In reality, the above is an encoding of the following.
module Expanded

  data ConatX (X : Type) : Type
  | zR
  | sR (x : X)

  codata Conat : Type
  & out : ConatX Conat

  z : Conat
  & out => zR

  s (n : Conat) : Conat
  & out => sR n

  add : (n m : Conat) -> Conat
  | z   , _    => { out := out m; }
  | _   , z    => { out := out n; }
  | s n', _    => { out := s (add n' m); }
  | _   , s m' => { out := s (add n m'); }

end Expanded

// Thanks to %OverlappingPatterns, we can easily prove that addition of
// conaturals is both associative and commutative, something that is very
// hard to do in Coq.

add-assoc (a b c : Conat) : add (add a b) c = add a (add b c) :=
  path i =>
  match a with
  | z    => add b c
  | s a' => s (add-assoc a' b c i)

add-comm : (n m : Conat) -> add n m = add m n
| z   , _    => refl
| _   , z    => refl
| s n', s m' => path i => s (s (add-comm n' m' i))

// omega also comes easily.

omega : Conat := s omega

// Translation:
// omega : Conat
// & out := sR omega

add-z-inv-l : (n m : Conat) -> add n m = z -> n = z
| z   , _ => fun _ => refl
| s n', _ => fun p : s (add n' m) = z => abort p

add-z-inv-r (n m : Conat) (p : add n m = z) : m = z
  add-z-inv-l m n (add-comm m n ^ p)

add-omega-l : (n : Conat) -> add omega n = omega
| z    => refl
| s n' => path i => s (add-omega-l n' i)
