// We use OverlappingPatterns by default. Let's have a directive for that!

%default OverlappingPatterns

data Nat : Type
| z
| s (pred : Nat)

add : (n m : Nat) -> Nat
| z   , m    => m
| s n', m    => s (add n' m)
| n   , z    => n
| n   , s m' => s (add n m')

// Note: we could have defined `add` in a more convoluted way:
// add' : (n m : Nat) -> Nat :=
// | z   , m => m
// | s n', m => add' n' (s m)

// But in such a case, we lose the possibility to apply our beloved overlapping
// pattern matching to get all the nice computational equalities.

sub : (n m : Nat) -> Nat
| z  , m   => z
| n  , z   => n
| s n, s m => sub n m

%Fail
mul : (n m : Nat) -> Nat
| z   , m    => z
| s n', m    => add (mul n' m) m
| n   , z    => z
| n   , s m' => add n (mul n m')

// `mul 1 m => add (mul z m) m => add z m = m`
// So a separate case for `mul 1 m` is not needed.

// ``mul n 1 => add n (mul n z) => add n z => n``
// Similarly, a separate case for `mul n 1` is not needed.

// mul (s n') (s m')    => add (mul n' (s m')) m => add (add n (mul n' m')) m
//                      => add n (mul (s n') m') => add n (add (mul n' m') m)

// The definition of `mul` is invalid, because `add` is only associative up to
// path, not up to computational equality.

pow : (n m : Nat) -> Nat
//| z (s m') => z
| n, z    => 1
| n, s m' => mul n (pow n m')

// ``pow z (s m') => z``
// ``pow z (s m') => mul z (pow z m') => z``
// the first clause is not needed

%FirstMatch
eq : (n m : Nat) -> Bool
| z   , z     => tt
| s n', s m') => eq n' m'
| _   , _     => ff

le : (n m : Nat) -> Bool
| z   , _    => tt
| s n', z    => ff
| s n', s m' => le n' m'

lt : (n m : Nat) -> Bool
| _   , z    => ff
| z   , s m' => tt
| s n', s m' => lt n' m'

min : (n m : Nat) -> Nat
| z   , _    => z
| _   , z    => z
| s n', s m' => s (min n' m')

max : (n m : Nat) -> Nat
| z   , m    => m
| n   , z    => n
| s n', s m' => s (max n' m')

half : Nat -> Nat
| z       => z
| s z     => z
| s (s k) => s (half k)

binom : (n k : Nat) -> Nat
| _   , z    => s z
| z   , s n' => z
| s n', s k' => plus (binom n' k') (binom n' k)

// Profits:
// add - 2 equations: add n z => n, add n (s m') => s (add n m')
// sub - 1 equation:  sub n z => n
// mul - 1 equation:  mul n z => z
// pow - 1 equation:  pow z (s m') => z
// eq  - z equations
// le  - z equations
// lt  - z equations
// min - 1 equation: min n z => z
// max - 1 equation: max n z => n
// half  z equations
// binom z equations

min-max : (n m : Nat) -> min n (max n m) = n
| z   , _    => refl
| s n', z    => ap s (min-max n' z)
| s n', s m' => ap s (min-max n' m')

le-lt : (n m : Nat) -> le (s n) m = lt n m :=
| _   , z    => refl
| z   , s m' => refl
| s n', s m' => le-lt n' m'
