data Set (A : Type) : Type
| in of A
| id
| union with (x y : Set A)
  | id, y  => y
  | x , id => x
  | union x y, z => union x (union y z)
| comm of (x y : Set A) with (i : I)
  | i0 => union x y
  | i1 => union y x
| idem of (x : Set A) with (i : I)
  | i0 => union x x
  | i1 => x
| isSet of (x y : Set A) (p q : x = y) (i j : I) with i
  | i0 => p j
  | i1 => q j

map (f : A -> B) : Set A -> Set B
| in    x           => in (f x)
| id                => id
| union x y         => union (map x) (map y)
| comm  x y     i   => comm  (map x) (map y) i
| idem  x       i   => idem  (map x)         i
| isSet x y p q i j => isSet (map x) (map y) (path i => map (p i)) (path i => map (q i)) i j

rev : Set A -> Set A
| in    x     => in x
| id          => id
| union x y   => union (rev y) (rev x)
| comm  x y i => comm  (rev y) (rev x) i
| idem  x   i => idem  (rev x)         i
| isSet x y p q i j => // TODO

rev-rev : (s : Set A) -> rev s = s
| in    x     => refl
| id          => refl
| union x y   => path i => comm (rev-rev y i) (rev-rev x i) i
| comm  x y i => // this is hell `rev (comm x y i) => comm (rev y) (rev x) i = comm x y i`
| idem  x   i => // this too

filter (p : A -> Bool) : Set A -> Set A
| in    x     => if p x then in a else id
| id          => id
| union x y   => union (filter x) (filter y)
| comm  x y i => comm  (filter x) (filter y) i
| idem  x   i => idem  (filter x)            i

join : Set (Set A) -> Set A
| in    x     => x
| id          => id
| union x y   => union (join x) (join y)
| comm  x y i => comm  (join x) (join y) i
| idem  x   i => idem  (join x)          i