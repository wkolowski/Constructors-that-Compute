// In this file we investigate lambda terms. Given our nominal inductive types,
// it should be, after all, pretty easy to model them!

// The type of lambda calculus terms.
data Term : Type =
| Var : (x : Name Term) -> Term
| App : (l r : Term) -> Term
| Lam : (t : ∇ α : Term. Term) -> Term

// We can decide equality quite easily.
dec : Term -> Term -> Bool :=
| Var x    , Var y     => name-dec x y
| App l1 r1, App l2 r2 => dec l1 l2 && dec r1 r2
| Lam t1   , Lam t2    =>
    match ν α. dec (t1 @ α) (t2 @ α) with
      | ν α. tt => tt
      | ν α. ff => ff
    end
| _ _ => ff

// Auxiliary lemma: our decision procedure is reflexive.
dec-refl : (t : Term) -> dec t t = tt
| Var x   => name-dec-refl x
| App l r =>
    match dec-refl l, dec-refl r with
      | refl, refl => refl
    end
| Lam t' =>
    match ν α. dec (t @ α) (t @ α) with
      | ν α. tt => refl
      | ν α. ff => (fun wut : ν α. dec (t @ α) (t @ α) = ν α. ff =>
          ν α.
          // We have `ap (@ α) wut     : dec (t @ α) (t @ α) = ff`.
          // We have `dec-refl (t @ α) : dec (t @ α) (t @ α) = tt`.
          // This yields a contradiction, which we can then extract
          // form under the ∇
          ) refl
    end

dec-spec-r {t1 t2 : Term} : t1 = t2 -> dec t1 t2 = tt
| refl => dec-refl t1

dec-spec-l : (t1 t2 : Term) -> dec t1 t2 = tt -> t1 = t2
| Var x    , Var y)     H => ap Var (name-dec-spec-l x y H)
| App l1 r1, App l2 r2) H =>
  // `dec t1 t2 = tt` is convertible with
  // `dec l1 l2 && dec r1 r2 = tt`, which gives
  // `Hl : dec l1 l2 = tt`
  // `Hr : dec r1 r2 = tt`
  // and so we have
  ap2 App (dec-spec-l l1 l2 Hl) (dec-spec-l r1 r2 Hr)
| Lam t1   , Lam t2)    H  =>
    match ν α. dec (t1 @ α) (t2 @ α) with
      | ν α. tt =>
          (fun wut : ν α. dec (t1 @ α) (t2 @ α) = ν α. tt =>
            fun i : I => Lam (ν α. dec-spec-l (t1 @ α) (t2 @ α) (ap (@ α) wut) i)
          ) refl
      | ν α. ff => abort H
    end
| _ _ H => abort H

// Again, if we are stupid, we can do the same using the encode-decode method.
module Stupid2

	data Code : Term -> Term -> Type :=
	| cvar : (x y : Name Term) -> x = y -> Code (Var x) (Var y)
	| capp : (l1 l2 r1 r2 : Term) -> Code l1 r1 -> Code l2 r2 -> Code (App l1 l2) (App r1 r2)
	| clam : (l r : ∇ α : Term. Term) -> ∇ α : Term. Code (l @ α) (r @ α) -> Code (Lam l) (Lam r)

	isProp_Code {t1 t2 : Term} : (c1 c2 : Code t1 t2) -> c1 = c2 :=
	| cvar x y p, cvar .x .y q =>
		  isSet-Name Term p q
	| capp l1 l2 r1 r2 c11 c12, capp .l1 .l2 .r1 .r2 c21 c22 =>
		  ap2 (capp l1 l2 r1 r2) (isProp_Code c11 c21) (isProp_Code c21 c22)
	| clam l r c1', clam .l .r c2' =>
		  // ap (clam l r) (fun i => ν α. isProp_Code (c1' @ α) (c2' @ α) i) // if path abstraction is permitted
		  match ν α. isProp_Code (c1' @ α) (c2' @ α) with
		    | ν α. refl => refl
	// Other cases are impossible.

end Stupid