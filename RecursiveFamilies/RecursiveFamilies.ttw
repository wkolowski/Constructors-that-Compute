// Let's say that when all constructors of `T` have a field `a : A`,
// then `a` becomes a function `a : T -> A`.

// This is a type of lists with constant-time length.
// The length is a piece of data that sits inside the constructors.
// `len` is an OUTPUT here.
data LenList (A : Type) : Type
| Nil  (len : Nat => z)
| Cons (h : A, t : LenList, len : Nat => s t.len)

// Here the index is also an OUTPUT.
data Vec (A : Type) : Nat -> Type
| Nil : Vec z
| Cons (h : A, #n : Nat, t : Vec A n) : Vec (s n)

// Here `n` is an INPUT.
Vec (A : Type) : Nat -> Type
| z   => Unit
| s n => (h : A, t : Vec A n)

// Record-o-inductive
// WAAAAAAAAAAAAAAAAAAAAAAAAAAT?
// Remember that `&` is a part of record syntax.
data Vec (A : Type) : Type
  indices
  & n : Nat

  // The index gets treated as output.
  constructors
  | Nil  (n => 0)
  | Cons (h : A, t : Vec, n => s t.n)

// Again, but differently.
data Vec (A : Type) : Type
  indices
  & n : Nat

  // The index gets treated as input.
  constructors with n
  | z    => Nil
  | s n' => Cons (h : A, t : Vec (n => n'))

// If the index is given as input, shit computes.
ex (v : Vec A (n => z)) : v = Nil := refl

eq-vec (x y : Vec A) : (x = y) = (p : x.n = y.n) * (x ={Vec A x.n} y) // bad

data Eq {A : Type} (x : A) : Type
  indices
  & y : A

  constructors
  | refl (y => x)

data Even : Type
  indices
  & n : Nat

  constructors
  | Ez  (n => 0)
  | Ess (e : Even, n => s (s e.n))

data Even : Type
  indices
  & n : Nat

  constructors with n
  | z => Ez
  | s (s n) => Ess (e : Even (n => n))

Even-1 : Even (s z) = Empty := refl

data Fin : Type
  indices
  & n : Nat

  constructors with n
  | s n =>
    | Fz
    | Fs (f : Fin (n => n))

Fin-example : Fin z = Empty := refl